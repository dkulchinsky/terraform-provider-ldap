---
page_title: "Provider: ldap"
description: |-
---

# {{ .ProviderShortName | upper }} Provider

## Data Sources

The provider makes it possible to read all details about a single LDAP entry or about a set of LDAP entries.

This is done in a strict generic way: the details are accessible through the attribute `data_json`.

Attributes can be ignored by `ignore_attributes` or `ignore_attribute_patterns`.

Attributes can be restricted by `restrict_attributes`.

Attributes can be encoded base64 by `base64encode_attributes` or `base64encode_attribute_patterns`.

Since version v0.4 `dn` can be used as alternative to `ou` and `filter`.

## Resources

The provider makes it possible to provide an LDAP entry. This can be used to create, modify, and delete LDAP entries.

This is done in a strict generic way: the details are specified through the attribute `data_json`.

LDAP attribute are case insensitive according to the LDAP specification.
The [go ldap library](https://pkg.go.dev/github.com/go-ldap/ldap/v3) implements this only for single attributes.
For efficiency reasons this provider uses ldap queries.

The provider can be configured by `entry_attribute_names_case_sensitive` to handle attribute names case sensitive or not.
For efficiency reasons the default is `true`.

If set to `false` it os possible to declare a list of attributes to be handled case sensitive by `case_sensitive_attribute_names` in the resource.

## Why generic?

I am convinced that a terraform provider should match the structure of the API used.

The other perspective would be to match the structure of a specific LDAP service. 
The argument against is that LDAP services are generic tools with different characteristics.   

If you need specific structures, you can code them in terraform.
If you like to reuse these structures, you can implement a terraform module.

## Example Usage

{{ tffile "examples/provider/provider.tf" }}

{{ .SchemaMarkdown | trimspace }}